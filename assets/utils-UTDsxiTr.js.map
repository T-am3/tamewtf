{"version":3,"file":"utils-UTDsxiTr.js","sources":["../../src/utils/markdown.ts"],"sourcesContent":["// Utility functions for parsing markdown files and extracting metadata\r\n\r\nexport interface BlogPost {\r\n  id: string;\r\n  title: string;\r\n  excerpt: string;\r\n  date: string;\r\n  readTime: string;\r\n  category: string;\r\n  tags: string[];\r\n  slug: string;\r\n  content?: string;\r\n  previewImage?: string;\r\n}\r\n\r\nexport interface Project {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  tags: string[];\r\n  slug: string;\r\n  featured?: boolean;\r\n  content?: string;\r\n  tools?: string[];\r\n  year?: string;\r\n  date?: string;\r\n  status?: string;\r\n  liveUrl?: string;\r\n  sourceUrl?: string;\r\n  previewImage?: string;\r\n}\r\n\r\nexport interface MarkdownParseResult {\r\n  metadata: Record<string, string>;\r\n  content: string;\r\n}\r\n\r\nexport interface FetchResult<T> {\r\n  data: T | null;\r\n  error: string | null;\r\n}\r\n\r\nexport class MarkdownParseError extends Error {\r\n  public readonly filePath?: string;\r\n\r\n  constructor(message: string, filePath?: string) {\r\n    super(message);\r\n    this.name = 'MarkdownParseError';\r\n    this.filePath = filePath;\r\n  }\r\n}\r\n\r\nexport class NetworkError extends Error {\r\n  public readonly url: string;\r\n  public readonly status?: number;\r\n\r\n  constructor(message: string, url: string, status?: number) {\r\n    super(message);\r\n    this.name = 'NetworkError';\r\n    this.url = url;\r\n    this.status = status;\r\n  }\r\n}\r\n\r\nfunction parseTags(metadata: Record<string, string>): string[] {\r\n  const tagsString = metadata.tags || metadata.tag || \"\";\r\n  if (!tagsString) return [];\r\n\r\n  if (tagsString.startsWith(\"[\") && tagsString.endsWith(\"]\")) {\r\n    return tagsString\r\n      .slice(1, -1)\r\n      .split(\",\")\r\n      .map((tag) => tag.trim().replace(/['\"]/g, \"\"))\r\n      .filter((tag) => tag.length > 0);\r\n  } else {\r\n    return tagsString\r\n      .split(\",\")\r\n      .map((tag) => tag.trim())\r\n      .filter((tag) => tag.length > 0);\r\n  }\r\n}\r\n\r\nexport function parseMarkdown(markdown: string): MarkdownParseResult {\r\n  try {\r\n    const lines = markdown.split(\"\\n\");\r\n    const metadata: Record<string, string> = {};\r\n    let contentStartIndex = 0;\r\n\r\n    if (lines[0]?.trim() === \"---\") {\r\n      let yamlEnd = -1;\r\n      for (let i = 1; i < lines.length; i++) {\r\n        if (lines[i].trim() === \"---\") {\r\n          yamlEnd = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (yamlEnd > 0) {\r\n        for (let i = 1; i < yamlEnd; i++) {\r\n          const line = lines[i].trim();\r\n          if (line.includes(\":\")) {\r\n            const [key, ...valueParts] = line.split(\":\");\r\n            let value = valueParts.join(\":\").trim();\r\n\r\n            if (\r\n              (value.startsWith('\"') && value.endsWith('\"')) ||\r\n              (value.startsWith(\"'\") && value.endsWith(\"'\"))\r\n            ) {\r\n              value = value.slice(1, -1);\r\n            }\r\n\r\n            metadata[key.trim()] = value;\r\n          }\r\n        }\r\n        contentStartIndex = yamlEnd + 1;\r\n      }\r\n    }\r\n\r\n    const content = lines.slice(contentStartIndex).join(\"\\n\").trim();\r\n\r\n    return { metadata, content };\r\n  } catch (error) {\r\n    throw new MarkdownParseError(\r\n      `Failed to parse markdown: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      'unknown'\r\n    );\r\n  }\r\n}\r\n\r\nexport function formatMarkdownContent(content: string): string {\r\n  return content\r\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"text-white\">$1</strong>')\r\n    .replace(/\\*(.*?)\\*/g, '<em class=\"text-gray-300\">$1</em>')\r\n    .replace(\r\n      /`(.*?)`/g,\r\n      '<code class=\"glass px-2 py-1 rounded text-sm\">$1</code>'\r\n    );\r\n}\r\n\r\nexport function generateSlug(title: string): string {\r\n  return title\r\n    .toLowerCase()\r\n    .replace(/[^a-z0-9\\s-]/g, \"\")\r\n    .replace(/\\s+/g, \"-\")\r\n    .replace(/-+/g, \"-\")\r\n    .trim();\r\n}\r\n\r\nexport async function fetchMarkdownFile(path: string): Promise<MarkdownParseResult> {\r\n  try {\r\n    const response = await fetch(path);\r\n\r\n    if (!response.ok) {\r\n      throw new NetworkError(\r\n        `Failed to fetch markdown file: ${response.status} ${response.statusText}`,\r\n        path,\r\n        response.status\r\n      );\r\n    }\r\n\r\n    const markdown = await response.text();\r\n\r\n    if (\r\n      markdown.trim().startsWith(\"<!doctype html>\") ||\r\n      markdown.trim().startsWith(\"<html\")\r\n    ) {\r\n      throw new MarkdownParseError(`Received HTML instead of markdown for path: ${path}`, path);\r\n    }\r\n\r\n    return parseMarkdown(markdown);\r\n  } catch (error) {\r\n    if (error instanceof NetworkError || error instanceof MarkdownParseError) {\r\n      throw error;\r\n    }\r\n    throw new NetworkError(\r\n      `Network error fetching markdown file: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      path\r\n    );\r\n  }\r\n}\r\n\r\nexport async function getAllBlogPosts(): Promise<BlogPost[]> {\r\n  let blogSlugs: string[] = [];\r\n\r\n  try {\r\n    const manifestResponse = await fetch('/blog/blogs.json');\r\n    blogSlugs = await manifestResponse.json();\r\n  } catch {\r\n    blogSlugs = [];\r\n  }\r\n\r\n  const posts: BlogPost[] = [];\r\n\r\n  for (const slug of blogSlugs) {\r\n    try {\r\n      const result = await fetchMarkdownFile(`/blog/${slug}.md`);\r\n      posts.push({\r\n        id: slug,\r\n        title: result.metadata.title || \"Untitled\",\r\n        excerpt: result.metadata.excerpt || \"\",\r\n        date: result.metadata.date || new Date().toISOString().split(\"T\")[0],\r\n        readTime: result.metadata.readTime || result.metadata[\"read time\"] || \"3 min read\",\r\n        category: result.metadata.category || \"general\",\r\n        tags: parseTags(result.metadata),\r\n        slug,\r\n        content: result.content,\r\n        previewImage: result.metadata.previewImage,\r\n      });\r\n    } catch (error) {\r\n      console.warn(`Failed to load blog post ${slug}:`, error instanceof Error ? error.message : error);\r\n    }\r\n  }\r\n\r\n  return posts.sort(\r\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\r\n  );\r\n}\r\n\r\nexport async function getBlogPost(slug: string): Promise<BlogPost | null> {\r\n  try {\r\n    const result = await fetchMarkdownFile(`/blog/${slug}.md`);\r\n    if (!result) {\r\n      return null;\r\n    }\r\n\r\n    const { metadata, content } = result;\r\n    return {\r\n      id: slug,\r\n      title: metadata.title || \"Untitled\",\r\n      excerpt: metadata.excerpt || \"\",\r\n      date: metadata.date || new Date().toISOString().split(\"T\")[0],\r\n      readTime: metadata.readTime || metadata[\"read time\"] || \"3 min read\",\r\n      category: metadata.category || \"general\",\r\n      tags: parseTags(metadata),\r\n      slug,\r\n      content,\r\n      previewImage: metadata.previewImage,\r\n    };\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getAllProjects(): Promise<Project[]> {\r\n  let projectSlugs: string[] = [];\r\n\r\n  try {\r\n    const manifestResponse = await fetch('/projects/projects.json');\r\n    projectSlugs = await manifestResponse.json();\r\n  } catch {\r\n    projectSlugs = [];\r\n  }\r\n\r\n  const projects: Project[] = [];\r\n\r\n  for (const slug of projectSlugs) {\r\n    try {\r\n      const result = await fetchMarkdownFile(`/projects/${slug}.md`);\r\n      if (result) {\r\n        const { metadata, content } = result;\r\n        projects.push({\r\n          id: slug,\r\n          title: metadata.title || \"Untitled\",\r\n          description: metadata.description || metadata.excerpt || \"\",\r\n          category: metadata.category || \"general\",\r\n          tags: parseTags(metadata),\r\n          slug,\r\n          featured: metadata.featured === \"true\",\r\n          content,\r\n          tools: metadata.tools ? JSON.parse(metadata.tools) : [],\r\n          year: metadata.year,\r\n          date: metadata.date,\r\n          status: metadata.status,\r\n          liveUrl: metadata.liveUrl,\r\n          sourceUrl: metadata.sourceUrl,\r\n          previewImage: metadata.previewImage,\r\n        });\r\n      }\r\n    } catch {\r\n      // Error loading project - skip\r\n    }\r\n  }\r\n\r\n  return projects;\r\n}\r\n\r\nexport async function getProject(slug: string): Promise<Project | null> {\r\n  const result = await fetchMarkdownFile(`/projects/${slug}.md`);\r\n  if (!result) return null;\r\n\r\n  const { metadata, content } = result;\r\n  return {\r\n    id: slug,\r\n    title: metadata.title || \"Untitled\",\r\n    description: metadata.description || metadata.excerpt || \"\",\r\n    category: metadata.category || \"general\",\r\n    tags: parseTags(metadata),\r\n    slug,\r\n    featured: metadata.featured === \"true\",\r\n    content,\r\n    tools: metadata.tools ? JSON.parse(metadata.tools) : [],\r\n    year: metadata.year,\r\n    date: metadata.date,\r\n    status: metadata.status,\r\n    liveUrl: metadata.liveUrl,\r\n    sourceUrl: metadata.sourceUrl,\r\n    previewImage: metadata.previewImage,\r\n  };\r\n}\r\n\r\nexport async function getAllBlogTags(): Promise<string[]> {\r\n  try {\r\n    const posts = await getAllBlogPosts();\r\n    const allTags = posts.flatMap((post) => post.tags);\r\n    return [...new Set(allTags)].sort();\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getAllProjectTags(): Promise<string[]> {\r\n  try {\r\n    const projects = await getAllProjects();\r\n    const allTags = projects.flatMap((project) => project.tags);\r\n    return [...new Set(allTags)].sort();\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n"],"names":["MarkdownParseError","message","filePath","NetworkError","url","status","parseTags","metadata","tagsString","tag","parseMarkdown","markdown","lines","contentStartIndex","yamlEnd","i","line","key","valueParts","value","content","error","fetchMarkdownFile","path","response","getAllBlogPosts","blogSlugs","posts","slug","result","a","b","getBlogPost","getAllProjects","projectSlugs","projects","getProject","getAllBlogTags","allTags","post","getAllProjectTags","project"],"mappings":"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"}